3. The original versions of Apple mobile iOS operating system provide
   no means of concurrent processing.
   Discuss three major complications that concurrent 
   processing adds to an operating system.
       . CPU Scheduling
       . Message passing
       . 

4. Some computer systems provide multiple register sets.
   Describe what happens when a context switch occurs if the new
   context is already loaded into one of the register sets.
       . Then we just need to load everything, but the register set,
         into main memory
   What happens if the new context is in memory rather than in a register
   set and all the register sets are in use?
       . One of the processes taking up memory, gets swapped out for this
         new process


5. process creates a new process using the fork() operation, which of
   the following states is shared between the parent process and the
   child process?
        . Stack is not shared. Deep copy is made for the child
        . Heap is not shared. Deep copy is made for the child
        . Shared memory segments are shared

6. Consider the "exactly once"-semantic with respect to the RPC mechanism.
   Does the algorithm for implementing this semantic execute correctly
   even if the ACK message sent back to the client is lost due to network
   problem?
   Describe the sequence of messages, and discuss whether "exactly"
   is still preserved
        . Yes, a timestamp is included, so that every ACK is unique

7. Assume that a distributed system is susceptible to server failure.
   What mechanisms would be required to guarantee the
   "exactly once"-semantic for execution of RPCs?
        . Memory is stored on multiple systems, so if a server fails, it
          is stored on multiple servers, and the execution is saved, if
          the server making the execution fails.

8. Describe the actions taken by a kernel to context-switch
   between processes.
        . Saving the status of a process to pick it back up later

9.
    #include <stdio.h>
    #include <unistd.h>
    int main()
    {
      int i;
      for (i = 0; i < 4; i++)
         fork();
      return 0;
    }

   Including the initial parent process, how many processes are
   created by the program shown below.
        . For each for, the amount is doubled.
          There are 4 fork(), so 2^4 = 16 processes

10.
    #include <sys/types.h>
    #include <stdio.h>
    #include <unistd.h>
    int main()
    {
      pid t pid, pid1;
      /* fork a child process */
      pid = fork();
      if (pid < 0) {
         /* error occurred */
         fprintf(stderr, "Fork Failed");
         return 1;
      }
      else if (pid == 0) {
         /* child process */
         pid1 = getpid();
         printf("child: pid = %d",pid);   /* A */
         printf("child: pid1 = %d",pid1); /* B */
      }
      else {
         /* parent process */
         pid1 = getpid();
         printf("parent: pid = %d",pid);   /* C */
         printf("parent: pid1 = %d",pid1); /* D */
         wait(NULL);
      }
      return 0;
    }


    Using the program below, identify the values of pid at lines
    A , B , C , and D . (Assume that the actual pids of the parent and
    child are 2600 and 2603, respectively.) 

        Line A
            . 0
        Line B 
            . 2603
        Line C
            . 2603
        Line D
            . 2600


11. Give an example of a situation in which ordinary pipes are more
    suitable than named pipes and an example of a situation in which
    named pipes are more suitable than ordinary pipes.
        . Ordinary pipes
            - Unidirectional
            - Anonymous, and the pipe is gone when one of the proccess are
              done
        . Named pipes
            - Bidirectional
            - Can be refrenced, due to having a name
            - Good if many processes want to pipe to the same process
                eg, a log file

12.
    #include <sys/types.h>
    #include <stdio.h>
    #include <unistd.h>
    #define SIZE 5
    int nums[SIZE] = {0,1,2,3,4};
    int main()
    {
      int i;
      pid t pid;
      pid = fork();
      if (pid == 0) {
         for (i = 0; i < SIZE; i++) {
           nums[i] *= -i;
           printf("CHILD: %d ",nums[i]); /* LINE X */
         }
      }
      else if (pid > 0) { wait(NULL);
         for (i = 0; i < SIZE; i++)
           printf("PARENT: %d ",nums[i]); /* LINE Y */
      }
      return 0;
    }


    Using the program shown below,
    explain what the output will be at lines X and Y. 
        . Line X = 0, -1, -4, -9, -16
        . Line Y = 0, 1, 2, 3, 4

OBS. wait(NULL) only waits for only ONE child to be done.



13. What are the benefits and the disadvantages of each of the following?
    Consider both the system level and the programmer level. 
        . Synchronous and asynchronous communication
            Sychronous, blocking:
                - More secure, but slower.
                - More 'connection' between the proccesses
            Asynchronous, non-blocking:
                - Faster, but not as much 'connection' between proccesses
                                             
        . Automatic and explicit buffering
            Automatic
                - No limit to amount of messages
                - Overhead, due to trying to figure out
                  how much will be needed
            Explicit
                - Fixed amount of messages

        . Send by copy and send by reference
            Copy
                - Send a copy of a value
                - Can be changed / destroyed without side-effects

            Reference
                - Send a pointer for a value
                - Changing will cause side-effects
                - Good for bigger data

        . Fixed-sized and variable-sized messages
            Fixed-sized
                - Limiting, but easier for the OS

            Variable-sized
                - Harder to handle, overhead, maybe fragmenting,
                  but flexible
                - Easy for programmer

14.
bpftrace -e 'tracepoint:raw_syscalls:sys_enter { @ = count(); } interval:s:1 { print(@); clear(@); }'

    What is the following bpftrace one-liner doing?
        - Counts how many sys_enter calls that are in a second
    What is the output you would expect? 
        - 

15.
    BEGIN { @i = 10; }
    interval:s:1
    /@i > 0/
    {
       @i--;
       printf("Tick %d\n",@i);
    }
    
    interval:s:1
    /@i == 0/
    {
       printf("blastoff!");
       exit();
    }


    dtrace:::BEGIN
    {
       i = 10;
    }
    
    profile:::tick-1sec
    /i > 0/
    {
       trace(i--);
    }
    
    profile:::tick-1sec
    /i == 0/
    {
       trace("blastoff!");
       exit(0);
    }

Discuss the following code of a bpftrace (resp. DTrace) script.
interval:s:1 (resp. profile:::tick-1sec) tells bpftrace (resp. DTrace)
to create a new probe which fires once per second.
What are the probes, what are the filters, and what are the actions
of the bpftrace script? What happens on execution and what is the
output of the program?
    The script has filters for i>0 and i==0
    The script prints a countdown from 9, and prints "blastoff!"
    Starts from 9, because the i-- is before the print

wrt DTrace: the function trace() indicates that DTrace should record
the specific argument and print it out.
    The script has filters for i>0 and i==0
    The script prints a countdown from 10, and prints "blastoff!"
    Starts from 10, because i-- is called in the trace()






C CODE


Analyse the following C program(s), and discuss the code given below
wrt. correctness, readability and efficiency of the code.
Is the first version more efficient than the naïve
recursive approach (2nd version) to compute the power of a number?
  . Version one loses readability eg if(exp & 1) instead of exp%2==1 
  . Version two sacrifices speed for readability

    /* Version 1 */
    #include <stdio.h>
    #include <inttypes.h>
    float power(float x, uint32_t exp);
    
    float power(float x, uint32_t exp)
    {
      float result;
      /* base case */
      if (exp == 0)
        return 1.0;
    
      result = power(x, exp >> 1);
      result = result * result;
    
      if (exp & 1)
        result = result * x;
      return result;
    }
    
    int main(int argc, char **argv)
    {
      float p;
      p = power(10.0, 5);
      printf("p = %f\n", p);
      return 0;
    }
    
    /* Version 2 */
    #include <stdio.h>
    #include <inttypes.h>
    float power(float x, uint32_t exp)
    {
      /* base case */
      if (exp == 0) {
        return 1.0;
      }
      /* recursive case */
      return x*power(x, exp - 1);
    }
    
    int main(int argc, char **argv)
    {
      float p;
      p = power(10.0, 5);
      printf("p = %f\n", p);
      return 0;
    }
