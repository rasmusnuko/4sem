1.    What is the purpose of system calls?
          . They're the interface between user space and services
            * I/O Operations, Program Execution, Error Detection, etc.



2.    What system calls have to be executed by a command interpreter or
      shell in order to start a new process on a UNIX system?
          . Fork
              - Duplicates a process which is running, and everything
                associated with it
              - exec is used to start the forked program with new 



3.    What is the purpose of system programs?
          . The command interpreter doesn't understand the command itself
            but finds the program
          . Commands are used to identify a file, to be loaded into memory
            and executed
          . ie. cp, ls, rm, mkdir, touch, ...



4.    What is the main advantage of the layered approach to system design?
          . Simplicity of construction and debugging
          . Each layer only uses the services of the lower-level layers
          . Example: Modules, no need to recompile OS for features to be added

      
      What are the disadvantages of the layered approach?
          . It is hard to pin point the functionality of each layer
          . Overhead because of user-level programs
            having to traverse through all the layers



5.    List five services provided by an operating system,
      and explain how each creates convenience for users.
      In which cases would it be impossible for user-level programs to 
      provide these services?
      Explain your answer.
          1. File management
              * Create, delete, copy, rename
          2. Program loading and execution
              * For loading programs into memory and executing them
          3. Communications
              * Creates virtual connections between processes
          4. File modification
              * Text editors
          5. Status information
              * Getting: date/time, logs, available disk / memory space.
          6. Error Detection
              * I/O device disconnected, Files has been corrupted
          - Implemented in OS, because users can't be trusted.
            And to make sure that all users on a system use the same
            file-system, etc.



6.    How could a system be designed to allow a choice of
      operating systems from which to boot?
          . OSes are just executables, a BIOS/EUFI could be used to choose
            which OS we want to boot into
      
      
      What would the bootstrap program need to do?
          . Load the kernel program into memory
          . Diagnostics to inspect memory and CPU + Discover devices
          . Initialize aspects of the system
          . Mount the root file system



7.    What are the advantages and disadvantages of using the same system-call
      interface for manipulating both files and devices?
          . Advantage: It is easy to implement and use, if there's only one 
            system calls for opening and closing files AND I/O devices
          
          ' Disadvantage: Limited access to complex devices, if they're only
            seen as files
          
          . We can prevent deadlocks if we have to request (open) and 
            release (close) devices



8.    Describe why Android uses ahead-of-time (AOT) rather
      than just-in-time (JIT) compilation.
          . JIT compiles as little as posible, good for error detection
          . AOT compiles as much as possible, good for effifiency

          . Program is written in Java
              compiled to .class -> .dex -> machine code
  
          . JIT can be expensive with power consumption 
          . It allows for more efficiency of application execution
            as well as reduced power consumption



9.    How are iOS and Android similar? How are they different?
          . Similarities
              * They're both hybrid systems
              * Touch-based UI
          . Differences
              * iOS uses a Microkernel (Mach), Android uses the Linux kernel
                  - Android monolithic with modules

              * Android runs on a broad assortment of devices,
                iOS is only made to run on iPhone

              * Closed sourced / Open sourced 



10.   What are the two models of interprocess communication?
      What are the strengths and weaknesses of the two approaches?
          . Shared memory
              * Strengths
                  - Faster. Once astablished, no assistence from the kernel
                    is required
              * Weaknesses
                  - Conflicts (Processes try to read memory at the same time)

          . Message passing
              * Strengths
                  - Best for smaller amount of data, no conflicts to avoid
                  - Easier to implement
              * Weaknesses
                  - Slower due to kernel interventions
                      typically implemented using system calls



11.   What is the main advantage of the microkernel approach to system design?
          . Minimal kernel, most services run at user-level

          . Main purpose is to provide communication between
            client programs and the services in user-space

          . It makes extending the OS easier.
            All services are added in user-space,
            and do not require modifications to the kernel
      
      
      How do user programs and system services interact in a micro-kernel 
      architecture?
          . Via Message passing
      
      
      What are the disadvantages of using the microkernel approach?
          . System-function overhead (from Message passing) causes the system 
            to slow down


C code:

(1.)
The following is the code to allocate memory for a 2-dimensional
array of fixed size 8Ã—8.

    #include <stdio.h>
    int main() {
    int x;
    int y;
    int array[8][8];
    for ( x = 0; x < 8; x++ ) {
      for ( y = 0; y < 8; y++ )
        array[x][y] = x * y;
      }
    }



Where in the memory is the matrix stored?
    On the stack, because it is statically allocated.
    It is statically allocated, because it says it is 8x8


Provide the code for a variant of the code that allocated the memory 
dynamically.

int main() {
    int x;
    int y;
    int **array = malloc(sizeof(int*)*8);
    for (x = 0; x < 8; x++){
        array[x] = malloc(sizeof(int)*8);
        for(y = 0; y<8; y++){
            array[x][y] = x*y;
            printf("%d\n", array[x][y]);
        }
    }
}


Where is your dynamically allocated memory stored?
    On the heap




(2.)
    #include <stdio.h>
    int main(int argc, char** argv)
    {
      stupid();
      stupid();
      return 0; 
    }

    int stupid()
    {
      static int i=17;
      printf("i is %d\n", i);
      i++;
    }

What is the output of the following C program?
    Because of the 'static', it means there's only one instance of 'i'
    
    No matter how many times we call stupid(), 'static int i = 17' only
    sets i = 17 once

    So the output is "17\n18\n"



(3.)

    #include <stdio.h>
    #include <stdlib.h>

    static int comp(const void * x, const void * y)
    {
      int a = (int)(*(int*)x);
      int b = (int)(*(int*)y);

      if (a==b)
        return 0;
      else
        if (a < b)
            return -1;
        else
            return 1;
    }

    int main(int argc, char* argv[])
    {
       int numbers[10]={1892,45,200,-98,4087,5,-12345,1087,88,-100000};
       int i;

      /* Sort the array */
      qsort(numbers,10,sizeof(int),comp) ;
      for (i=0;i<9;i++)
        printf("Number = %d\n",numbers[ i ]) ;
      return 0;
    }

Discuss the following C program, and put it in relation to the function
declaration as found by the man page of the library function for sorting 
an array:
void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));

The function sorts an array
base: The array to sort
memb: Size of array
size: Memory size of the values in the array (Because base is a void*)
*compar: compares two values from the array, return 0 or -1 or 1 



(4.)

    #include <stdio.h>

    #define SQR(a)((a)*(a))
    #define CUB(a)((a)*(a)*(a))


    inline static int cub(int x) { return x*x*x; }

    int main()
    {
            int x;

            x=3;
            printf("square? :%d\n",SQR(x));
            printf("x:       %d\n",x);

            x=3;
            printf("square? :%d\n",SQR(++x));
            printf("x:       %d\n",x);

            x=3;
            printf("cub?    :%d\n",CUB(x++));
            printf("x:       %d\n",x);

            x=3;
            printf("cub?    :%d\n",CUB(++x));
            printf("x:       %d\n",x);

            x=3;
            printf("cub?    :%d\n",cub(++x));
            printf("x:       %d\n",x);

            return 0;
    }

Discuss the result of the following C program. If possible, try it on
different machines. In order to understand the results, find out what a
sequence point is.
    CUB(a)((a)*(a)*(a))
    x++ : CUB(x++) = (x++) * (x++) * (x++) == undefined behaviour
    ++x : Samme udfald

Follow the C-tutorial for FILE I/O on
https://www.cprogramming.com/tutorial/cfileio.html
and answer the quiz questions.

