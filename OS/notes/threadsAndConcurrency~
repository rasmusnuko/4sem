Why do we use threads?
    . Benefits
        - Responsiveness
        - Resource sharing
        - Creation of threads is cheaper than creation of process
        - Process can take advantge of multiprocessor architectures

Concurrency vs Parallelism
    . Concurrency
        - Multiple threads running, but not at the same time
        - Supports more than one task can progress
    . Parallelism
        - Multiple running at the same time, on different cores
        - Implies a system can perform tasks simultaneously
        - Data parallelism (Diff?)
        - Task parallelism (Diff?)

Ahdahl's Law
  speedup < 1 / (S + ( (1-S) / N ))
    . S is serial portion # N is processing cores
    . Identifies performance gains from adding additional cores 
      to an application, that has both serial and parallel components


Multithreading Models
    . Many-To-One
        - Many user-level threads mapped to single kernel thread
        - One thread blocking causes all to block
    . One-to-one
        - Each thread is mapped to a thread


Thread libraries
    . 2 primary ways
        - Implemented in User space
        - Implemented in Kernel space
    . Pthreads
        - Specification, not implementaion
        - Common in UNIX OS

Implicit threading
    . Thread pools
        - Create a number of thread in a pook where they await work
    . Fork-join
        - Multiple threads (tasks) are forked, and then joined
        - If a problem is small enough, solve it directly
            else create a subtask and join the results
    . OpenMP
        - Provides support for parallel programming in
          shared-memory enviroments
        - Identifies parallel regions
            . block of code that can run in parallel
    . Grand Centrail Disptach
        - MacOS & iOS
        - Extensions to C, C++, and Objectiev-C languages, API
        - Blocks placed in dispatch queue
    . Intel THreading Buuilding Blocks (TBB)
        - Template library for signing parallel C++ programs
 

Threading Issues (Policies)
    . Semantics of fork() and exec() systems calls
         - fork()
             . Should a fork duplicate?
             . Some UNIXes have two versions
         - exec()
             . Works as it always does 
    . Signal Handiling
         - Synchronous
         - Asynchronous
    . Thread Cancellation
         - What should happen if a thread is
           terminated before finishing?
         - Deffered Cancellation = Nice one
         - Asynchronous Cancellation = Terminates immediately
    . Thread-Local Storage
         - Allows each thread to have its own copy of data
         - Useful when you dont have control over the thread creation
           process (i.e. when using a thread pool)
         - Diffenrt from local variables
         - Similar to 'static' data
             - TLS is unique to each thread
    . Scheduler Activations
         - Both M_M and Two-level models require communication
           to maintain the appropiate number og kernel threads 
           allocated to the application
         - Typically use an imermediate data structure between
           user and kernel thread
         - Lightweight Process (LWP)
         - Scheduler activations provide 'upcalls' - a communication
           mechanism from the kernel to the upcall handler in the 
           thread library

Operating System Threads
  Examples:
    . Windows XP Threads
        - Windows implement the Windows API
        - Thread Enviroment Block + Kernel Thread
    . Linux Threads
        - Linux refers to them as tasks rather than threads
        - Thread creation is done through clone() system call
        - clone() allows a child task to share the address
          space of the parent task (process)







