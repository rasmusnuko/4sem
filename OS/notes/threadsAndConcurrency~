Why do we use threads?
    . Benefits
        - Responsiveness
        - Resource sharing
        - Creation of threads is cheaper than creation of process
        - Process can take advantge of multiprocessor architectures

Concurrency vs Parallelism
    . Concurrency
        - Multiple threads running, but not at the same time
        - Supports more than one task can progress
    . Parallelism
        - Multiple running at the same time, on different cores
        - Implies a system can perform tasks simultaneously
        - Data parallelism (Diff?)
        - Task parallelism (Diff?)

Ahdahl's Law
  speedup < 1 / (S + ( (1-S) / N ))
    . S is serial portion # N is processing cores
    . Identifies performance gains from adding additional cores 
      to an application, that has both serial and parallel components


Multithreading Models
    . Many-To-One
        - Many user-level threads mapped to single kernel thread
        - One thread blocking causes all to block
    . Many-to-Many
    . One-to-One
        - Each thread is mapped to a thread


Thread libraries
    . 2 primary ways
        - Implemented in User space
        - Implemented in Kernel space
    . Pthreads
        - Specification, not implementaion
        - Common in UNIX OS

Implicit threading
    . Thread pools
        - Create a number of thread in a pook where they await work
    . Fork-join
        - Multiple threads (tasks) are forked, and then joined
        - If a problem is small enough, solve it directly
            else create a subtask and join the results
    . OpenMP
        - Provides support for parallel programming in
          shared-memory enviroments
        - Identifies parallel regions
            . block of code that can run in parallel
    . Grand Centrail Disptach
        - MacOS & iOS
        - Extensions to C, C++, and Objectiev-C languages, API
        - Blocks placed in dispatch queue
    . Intel THreading Buuilding Blocks (TBB)
        - Template library for signing parallel C++ programs
 

Threading Issues (Policies)
    . Semantics of fork() and exec() systems calls
         - fork()
             . Should a fork duplicate?
             . Some UNIXes have two versions
         - exec()
             . Works as it always does 
    . Signal Handiling
         - Synchronous
         - Asynchronous
    . Thread Cancellation
         - What should happen if a thread is
           terminated before finishing?
         - Deffered Cancellation = Nice one
         - Asynchronous Cancellation = Terminates immediately
    . Thread-Local Storage
         - Allows each thread to have its own copy of data
         - Useful when you dont have control over the thread creation
           process (i.e. when using a thread pool)
         - Diffenrt from local variables
         - Similar to 'static' data
             - TLS is unique to each thread
    . Scheduler Activations
         - Both M_M and Two-level models require communication
           to maintain the appropiate number og kernel threads 
           allocated to the application
         - Typically use an imermediate data structure between
           user and kernel thread
         - Lightweight Process (LWP)
         - Scheduler activations provide 'upcalls' - a communication
           mechanism from the kernel to the upcall handler in the 
           thread library

Operating System Threads
  Examples:
    . Windows XP Threads
        - Windows implement the Windows API
        - Thread Enviroment Block + Kernel Thread
    . Linux Threads
        - Linux refers to them as tasks rather than threads
        - Thread creation is done through clone() system call
        - clone() allows a child task to share the address
          space of the parent task (process)


CPU Scheduling
Basics Concept
    . Maximum CPU utilization obtained with multiprogramming
    . CPU - I/O Burst cycle
        - Process execution consist of cycle of CPU and I/O bursts
    . Most processes often have many short CPU bursts
        (and a few long ones)

When are sceduling decisions made?
    . Switches from running to waiting state
    . Switches from running to ready state
    . Switches from wating to reay state
    . Terminates

Preemptive / Nonpreemptive
    . Preemptive
        - 
    . Nonpreemptive
        - Only kicked off CPU, if someone else has to do something
        - A process might be able to take over the CPU


Dispatch latency:
    The time it takes from ready --> running

Scheduling Criteria
    . High CPU Utilization: Keep CPU busy
    . High Throughput: # of processes / time unit
    . Low Turnaround time: amount of time pr. process
    . Low Waiting time: Amount of time waiting in the queue


Scheduling algorithms:
    . First-Come, First-Served (FCFS)
        - Average waiting time is reduced
          if short chops come first
    . Shortest-Job-First scheduling
        - The lower the burst time, the higher priority
        - Problem? How do we know burst times?
            . We DON'T! Estimates have to be made
                - Using Exponential averaging 
    . Shortest-remaining-time-first
    . Round Robin (RR)
    . Time Quantum & Context Switch
    . Priority Scheduling
    . Multilevel Queue
    . Multilevel Feedback Queue

Thread Scheduling:
    . Distinction between user-level and kernel-level threads
    . When threads supported, threads scheduled, not processes
    . Many-to-One and Many-to-Many models
    . Kernel thread scheduled onto available CPU is
      system-contention scope (SCS) - conpletion among all threads
      in system

Multiple-Processor Scheduling:
    . 'Recent' trend to place multiple processor cores on same chip
    . Multiple threads pr. core also growing
        - Takes advantage of memory stall to make progress on
          another thread while memory retrieve happens
    . CPU scheduling more complex when multiple CPUs
    . SMP (Symmetric multiprocessing) is where each processor is
      self scheduling
    . All threads may be in a common ready queue
    . Each processor may have its own private queue og threads
    . Affinity
        - Soft: OS attempts to keep a thread on the same proccessor
        - Hard: Allows a process to specify a set of processors it
                may run on

Real-Time CPU scheduling
    - Soft realtime systems
        . Critical real-time tasks have the highest priority,
          but no guarantee as to when tasks will be scheduled
    - Hard real-time systems
        . Task must be serviced by its deadline

    . Event latency
        - The amount of time that elapses from when an event
          occurs to when it is serviced.
    2. types of latencies affect performance
        1. Interrupt latency
            . Time from arrival of interrupt to start
              of routine that services interrupt
        2.Dispatch latency
            . Time for schedule to take current process off CPU and
              switch to another
    
Operating System Examples
    . Linux scheduling
         - 'Completely Fair Scheduler'
             . Lower priority = most important
             . Priority 0-100: 'Real-time tasks'
             . Priority 101-140: 'User tasks'
             - 'PR' in top calculated as (priority-100)
         - 
         - 
    . Windows scheduling
         - 
    . Solaris scheduling
         - 
















